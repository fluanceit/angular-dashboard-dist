{"version":3,"sources":["angular-dashboard-fluance.min.js"],"names":["angular","module","directive","restrict","scope","component","dashboard","templateUrl","link","element","attrs","params","isStateSorting","isExtended","states","controller","refreshStateSorting","extended","openExtended","event","enableExtended","closeExtended","openSettings","displaySettings","settings","closeSettings","dashboardFactory","currentWidth","timeout","id","width","columns","columnsMinWidth","$","window","get","setOptions","refresh","addEventListener","clearTimeout","setTimeout","$apply","sortableConfig","group","name","pull","to","from","dragEl","evt","type","draggable","disabled","handle","scroll","scrollSensitivity","scrollSpeed","onAdd","sortAllComponents","onUpdate","DashboardFactoryFunction","DashboardObject","store","remove","reinitialize","factory","$inject","DashboardObjectFunction","$injector","add","instance","nbComponent","components","push","options","toggleSortable","parent","numberOfColumnPossible","parseInt","maxAllowColumns","lastNumberColumns","columnsWidth","grid","i","forEach","column","position","nbColumn","positions","length","Math","floor","random","splice","newOptions","Object","keys","key","toString","componentList","JSON","stringify","fromString","dashboardString","componentObject","parse","componentNotAdded","newComponentList","has","error","hasComponent","_component","_","isMatch","oldColumn","newColumn","originalEvent","replace","index","console","log","disableExtended","DEFAULT_DASHBOARD","sortable","algo","service","run","$templateCache","put"],"mappings":"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","file":"angular-dashboard-fluance.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    /**\n     *\n     * @ngdoc module\n     * @name dashboard\n     * @module dashboard\n     * @packageName dashboard\n     * @description\n     * Main module to display angular dashboard fluance.\n     *\n     **/\n    angular.module('dashboard', ['ng-sortable']);\n})();\n\n/**\n * Mycockpit Directive\n */\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .directive('displayComponent', function() {\n            return {\n                restrict: 'E',\n                scope: {\n                    'component': '=',\n                    'dashboard': '='\n                },\n                templateUrl: 'dashboard.component.directive.html',\n                link: function(scope, element, attrs) {\n\n                    scope.params = scope.component.params;\n                    if (scope.component.scope) {\n                        // angular.extend(scope, scope.component.scope);\n                        // Break data binding :( needs to be fixed\n                        scope.scope = scope.component.scope;\n                    }\n\n                    // call controller for state = 'default' (don't call if dashboard is in sorting state)\n                    if (!scope.dashboard.isStateSorting && !scope.component.isExtended && scope.component.states.default && scope.component.states.default.controller) {\n                        scope.component.states.default.controller();\n\n                        // update state 'isSorting' for the component\n                        if(scope.component.states.default.refreshStateSorting) {\n                            scope.component.states.default.refreshStateSorting(scope.dashboard.isStateSorting);\n                        }\n                    }\n                    // call controller for state = 'extended'\n                    else if (scope.component.isExtended && scope.component.states.extended && scope.component.states.extended.controller) {\n                        scope.component.states.extended.controller();\n                    }\n\n                    scope.openExtended = function(event) {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.dashboard.enableExtended();\n                            scope.component.isExtended = true;\n                            // Execute JS\n                            if (scope.component.states.extended && scope.component.states.extended.controller) {\n                                scope.component.states.extended.controller();\n                            }\n                        }\n                    };\n                    scope.closeExtended = function(event) {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.dashboard.isExtended = false;\n                            scope.component.isExtended = false;\n                            if (scope.component.states.default && scope.component.states.default.controller) {\n                                scope.component.states.default.controller();\n                            }\n                        }\n                    };\n                    scope.openSettings = function(event) {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.component.displaySettings = true;\n                            if (scope.component.states.settings && scope.component.states.settings.controller) {\n                                scope.component.states.settings.controller();\n                            }\n                        }\n                    };\n                    scope.closeSettings = function(event) {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.component.displaySettings = false;\n                            if (scope.component.states.default && scope.component.states.default.controller) {\n                                scope.component.states.default.controller();\n                            }\n                        }\n                    };\n                }\n            };\n        });\n})();\n\n/**\n * Mycockpit Directive\n */\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .directive('dashboard', ['dashboardFactory', function(dashboardFactory) {\n\n            // Width of the dashboard container\n            var currentWidth;\n            // To detet a change of column\n            var lastNumberColumns;\n            // Usually currentWidth / minWidth where max is numberMaxOfColumn\n            var numberOfColumnPossible;\n            // Width of columns in % to use in ng-style\n            var columnsWidth;\n            // Maximum number of columns\n            var numberMaxOfColumn;\n            // Thread to avoir too much event trigger during resize\n            var timeout;\n\n            return {\n                restrict: 'E',\n                scope: {\n                    'id': '@',\n                    'width': '@',\n                    'columns': '@',\n                    'columnsMinWidth': '@'\n                },\n                templateUrl: 'dashboard.directive.html',\n                controller: ['$scope', function(scope) {\n                    currentWidth = $( window ).width();\n\n                    scope.dashboard = dashboardFactory.get(scope.id);\n\n                    scope.dashboard.setOptions({\n                        'width': scope['width'],\n                        'columns': scope['columns'],\n                        'columnsMinWidth': scope['columnsMinWidth']\n                    });\n\n                    scope.dashboard.refresh();\n\n                    // On resize we refresh\n                    window.addEventListener('resize', function(event) {\n\n                        if ($( window ).width() !== currentWidth) {\n                            // update currentWidth with current window width\n                            currentWidth = $( window ).width();\n                            clearTimeout(timeout);\n                            timeout = setTimeout(function () {\n                                scope.dashboard.refresh();\n                                scope.$apply();\n                            }, 150);\n                        }\n                    }, true);\n\n                    // Sortable configuration\n                    scope.sortableConfig = {\n                        group: {\n                            name: scope.dashboard.id,\n                            pull: function(to, from, dragEl, evt) {\n\t\t\t\t// for mobile (evt.pointerType == \"touch\" => in Sortable.js:_triggerDragStart()), evt.type = undefined. Use 'to' and 'from'\n\t\t\t\tif((evt.type === 'dragstart') || (!evt.type && (to === from))) {\n                                    return false;\n                                }\n                                return true;\n                            }\n                        },\n                        draggable: '.component',\n                        disabled: scope.dashboard.isStateSorting, // No databinding here, need to be updated\n                        handle: '.sortable-handle',\n                        scroll: true,\n                        scrollSensitivity: 30, // px, how near the mouse must be to an edge to start scrolling.\n                        scrollSpeed: 10, // px\n                        onAdd: function(evt) {\n                            // Event triggered when add in column\n                            scope.dashboard.sortAllComponents(evt);\n                        },\n                        onUpdate: function(evt) {\n                            // event triggered when column is changed\n                            scope.dashboard.sortAllComponents(evt);\n                        }\n                    }\n                }]\n            };\n        }]);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .factory('dashboardFactory', DashboardFactoryFunction);\n\n    DashboardFactoryFunction.$inject = ['dashboardObject'];\n\n    /**\n     * @ngdoc service\n     * @module dashboard\n     * @name dashboardObject\n     * @description\n     *\n     * This is a dashboard object. Allow you to create an object.\n     *\n     */\n    function DashboardFactoryFunction(DashboardObject) {\n\n        /**\n         * This object store all dashboards, available by id.\n         * @type {Object}\n         */\n        var store = {};\n\n        var factory = {\n            get: get,\n            remove: remove,\n            reinitialize: reinitialize\n        };\n\n        return factory;\n\n        /**\n         * Get a dashboard, based on its id\n         * @param  {String} id [description]\n         * @return {Object}    Index of dashbaords\n         */\n        function get(id) {\n            if (!store[id]) {\n                store[id] = new DashboardObject();\n                store[id].id = id;\n            }\n            return store[id];\n        }\n\n        /**\n         * Remove from a dashboard, based on its id\n         * @param  {String} id [description]\n         */\n        function remove(id) {\n            if (store[id]) {\n                delete store[id];\n            }\n        }\n\n        /**\n         * Remove all dashboards from factory (used to reinitialize)\n         */\n        function reinitialize() {\n            store = {};\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .service('dashboardObject', DashboardObjectFunction);\n\n    DashboardObjectFunction.$inject = ['$injector'];\n\n\n    /**\n     * @ngdoc service\n     * @name dashboardObject\n     * @description\n     *\n     * This is a dashboard object. Allow you to create an object.\n     */\n    function DashboardObjectFunction($injector) {\n\n        /* jshint maxdepth: 10 */\n\n        // Return a function to be used as new User();\n        return function(params) {\n            var DEFAULT_DASHBOARD = {\n                // ID : string to identify a dashboard\n                id: null,\n                // auto_increment when add a component. To generate unique ID\n                nbComponent: 0,\n                // Used in template to know if dashboard is extended or not\n                isExtended: false,\n                // List of all component\n                components: [],\n                // Array of columns. Contain all component\n                grid: [],\n\n                // Define if dashboard is in sortable state\n                isStateSorting: false, // Activate disable shaking state\n\n                // This array contain list of sortable columns\n                sortable: null, // Array of columns objects\n\n                // Column width in pixel\n                columnsWidth: null,\n\n                // stored option to manage dashboard configuration.\n                options: {\n                    // Full width of entiere dashboard\n                    'width': 'auto',\n                    // Number of columns in dashboard\n                    'columns': '2',\n                    // Min width of columns.\n                    'columnsMinWidth': null,\n                    // Enable/disable sorting\n                    'sortable': true,\n                    // Algorithm to define where to put component if no column\n                    // can be shorter, or Random\n                    'algo': 'shorter'\n                },\n\n                /**\n                 * List of function to add\n                 */\n                add: add,\n                setOptions: setOptions,\n                toString: toString,\n                fromString: fromString,\n                hasComponent: hasComponent,\n                enableExtended: enableExtended,\n                disableExtended: disableExtended,\n                refresh: refresh,\n                toggleSortable: toggleSortable,\n                sortAllComponents: sortAllComponents\n            };\n\n            var instance = DEFAULT_DASHBOARD;\n            var lastNumberColumns, maxAllowColumns;\n\n            return instance;\n\n            // ---------------------------------------------------------------------------\n\n            /**\n             * Add a component in array\n             * @param {Object} component    Dashboard component\n             * @param {integer} column      Column number, starting at zero\n             */\n            function add(component) {\n\n                // Define component ID\n                component.id = instance.id + '-' + instance.nbComponent;\n                instance.nbComponent++;\n                // Add in list\n                instance.components.push(component);\n\n                return component;\n            }\n\n            /**\n             * Refresh dashboard grid layout. Used for exemple on resize event to\n             * redefine column number.\n             * @return {[type]} [description]\n             */\n            function refresh() {\n\n                // Define options shortcut\n                var options = instance.options;\n\n                // If is on sorting mode, we stop it\n                if (instance.isStateSorting) {\n                    instance.toggleSortable();\n                }\n\n                //\n                // Redefine grid layout\n                //\n                var currentWidth = $('#' + instance.id).parent().width();\n\n                // If screen smaller than expected width, we take size\n                if (options.width !== 'auto' &&\n                    options.width < currentWidth) {\n                    currentWidth = options.width;\n                }\n\n                var numberOfColumnPossible = parseInt(currentWidth / options.columnsMinWidth);\n                numberOfColumnPossible = (numberOfColumnPossible ? numberOfColumnPossible : 1);\n\n                if (numberOfColumnPossible > maxAllowColumns) {\n                    numberOfColumnPossible = maxAllowColumns;\n                }\n                if (lastNumberColumns !== numberOfColumnPossible) {\n                    lastNumberColumns = numberOfColumnPossible;\n                    // Case 1, we make them float\n                    if (numberOfColumnPossible < options.columns) {\n                        instance.columnsWidth = (100 / numberOfColumnPossible) + '%';\n                    } else if (numberOfColumnPossible > options.columns) {\n                        instance.columnsWidth = (100 / numberOfColumnPossible) + '%';\n                    } else {\n                        instance.columnsWidth = (100 / options.columns) + '%';\n                    }\n                }\n                // If numberOfColumnPossible === 0 then 1 is minimim number of possible column\n                options.columns = numberOfColumnPossible;\n                //\n                // Dispatch component in new grid layout.\n                //\n                instance.grid = [];\n                for (var i = options['columns'] - 1; i >= 0; i--) {\n                    instance.grid[i] = [];\n                }\n\n                // For each component, we define its position and inject it in our grid object.\n                // Grid is displayed in DOM by dashboard.directive.js\n                instance.components.forEach(function(component) {\n\n                    var column = 0,\n                        position = 0;\n                    var nbColumn = options['columns'];\n\n                    // Check if position is define\n                    if (component.positions && component.positions[nbColumn]) {\n                        column = component.positions[nbColumn]['column'];\n                        position = component.positions[nbColumn]['position'];\n                    } else {\n\n                        // define component position\n                        if (options['algo'] === 'shorter') {\n                            // For each column starting by the end, we check size\n                            for (var i = options['columns'] - 1; i >= 0; i--) {\n                                // if column i in grid does not exist\n                                if (!instance.grid[i]) {\n                                    column = i;\n                                    instance.grid[i] = [];\n                                } else {\n                                    // If it exist\n                                    if (instance.grid[i].length <= instance.grid[column].length) {\n                                        column = i;\n                                    }\n                                }\n                            }\n                        } else if (options['algo'] === 'random') {\n                            column = Math.floor(Math.random() * options['columns']);\n                        } else {\n                            column = 0;\n                        }\n\n                        // define position of defined column. Get last position.\n                        if (instance.grid[column]) {\n                            position = instance.grid[column].length;\n                        }\n\n                        // Save new position in layout.\n                        if (!component.positions) {\n                            component.positions = {};\n                        }\n                        component.positions[nbColumn] = {};\n                        component.positions[nbColumn]['column'] = column;\n                        component.positions[nbColumn]['position'] = position;\n                    }\n\n                    // If grid never used this column before, create one.\n                    if (!instance.grid[column]) {\n                        instance.grid[column] = [];\n                    }\n                    // Add compoment in grid to defined position.\n                    instance.grid[column].splice(position, 0, component);\n\n                });\n            }\n\n            /**\n             * Set dashboard options.\n             */\n            function setOptions(newOptions) {\n                // For each new option we override current one.\n                Object.keys(newOptions).forEach(function(key) {\n                    if (newOptions[key]) {\n                        instance.options[key] = newOptions[key];\n                        // If edit columns, we save as maxAllowColumns.\n                        if (key === 'columns') {\n                            maxAllowColumns = newOptions[key];\n                        }\n                    }\n                });\n            }\n\n            /**\n             * Convert the dashboard to a String\n             * @return {String} Dashboard as a String\n             */\n            function toString() {\n                var componentList = [];\n\n                // For each column in grid\n                instance.grid.forEach(function(column) {\n                    column.forEach(function(component) {\n                        componentList.push({\n                            name: component.name,\n                            params: component.params,\n                            positions: component.positions\n                        });\n                    });\n                });\n\n                return JSON.stringify(componentList);\n            }\n\n            /**\n             * Create a dashboard from a String\n             * @param  {String} dashboardString Dashboard as a String\n             * @returns {Boolean|String} true, if all components were added to the Dashboard or Dashboard as String with only the added components\n             */\n            function fromString(dashboardString) {\n                var componentList = JSON.parse(dashboardString),\n                    componentNotAdded = false,\n                    newComponentList = [],\n                    componentObject;\n\n                componentList.forEach(function(component) {\n                    // component is known by injector\n                    if ($injector.has(component.name)) {\n                        try {\n                            componentObject = add(new $injector.get(component.name)(component.params));\n                            componentObject.positions = component.positions;\n                            newComponentList.push(component);\n                        }\n                        // error creating/injecting component\n                        catch(error) {\n                            componentNotAdded = true;\n                        }\n                    }\n                    else {\n                        componentNotAdded = true;\n                    }\n                });\n\n                return componentNotAdded ? JSON.stringify(newComponentList) : true;\n            }\n\n            /**\n             * Verifies if component is part of the Dashboard\n             * @param {Object} component component to verify\n             * @returns {boolean} true, if component is part of the Dashboard; false, otherwise\n             */\n            function hasComponent(component) {\n                var _component;\n\n                for(var i=0; i<instance.components.length; i++) {\n                    _component = instance.components[i];\n                    // same name\n                    if(component.name === _component.name) {\n                        if(component.params && _component.params) {\n                            // same name and same params\n                            if(_.isMatch(component.params, _component.params)) {\n                                return true;\n                            }\n                        }\n                        // same name (no params)\n                        else {\n                            return true;\n                        }\n                    }\n                };\n                // not found\n                return false;\n            }\n\n            // Apply drag/drop to angular MVC (alias grid object)\n            function sortAllComponents(evt) {\n                var oldColumn,\n                    newColumn,\n                    nbColumn;\n\n                // Identify columns\n                oldColumn = evt.originalEvent.from.id.replace('column', '');\n                newColumn = evt.originalEvent.to.id.replace('column', '');\n\n                // -- update the component position in the current grid configuration (total number of columns) --\n\n                // Get total number of columns in the grid\n                nbColumn = instance.options['columns'];\n\n                // Update old (FROM) position indexes:\n                // - component was removed from array, update the position of all components in this array\n                instance.grid[oldColumn].forEach(function (component, index) {\n                    // column remains the same; update only the component position\n                    component.positions[nbColumn].position = parseInt(index);\n                });\n\n                // Update new (TO) position index:\n                // - component was added into array, update the position of all components in this array\n                instance.grid[newColumn].forEach(function (component, index) {\n                    component.positions[nbColumn].column = parseInt(newColumn);\n                    component.positions[nbColumn].position = parseInt(index);\n                });\n            }\n\n            /**\n             * This function enable/disable sorting state of dashboard\n             */\n            function toggleSortable() {\n                // If dashboard is sortable by user\n                if (!instance.options['sortable']) {\n                    console.log('This dashboard does not allow sorting (see options configuration).');\n                } else {\n                    // Toggle sorting state\n                    instance.isStateSorting = !instance.isStateSorting;\n\n                    // update 'isSorting' state of all components\n                    instance.components.forEach(function(component) {\n                        if(component.states.default.refreshStateSorting) {\n                            component.states.default.refreshStateSorting(instance.isStateSorting);\n                        }\n                    });\n                }\n            }\n\n            /**\n             * Change dashboard state to extended.\n             */\n            function enableExtended() {\n                instance.isExtended = true;\n            }\n\n            /**\n             * This function disable extended dashboard to make it as default\n             */\n            function disableExtended() {\n                instance.isExtended = false;\n\n                instance.components.forEach(function(component) {\n                    if (component.isExtended) {\n                        component.isExtended = false;\n\n                        // change component state to 'default'\n                        if (component.states.default && component.states.default.controller) {\n                            component.states.default.controller();\n                        }\n                    }\n                });\n            }\n        };\n    }\n})();\n\nangular.module(\"dashboard\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"dashboard.component.directive.html\",\"<div id=\\\"{{component.id}}\\\" class=\\\"dashboard-component\\\"><div class=\\\"default\\\" data-ng-include=\\\"component.states.default.template\\\" data-ng-if=\\\"!dashboard.isExtended && !component.displaySettings\\\"></div><div class=\\\"extended\\\" data-ng-include=\\\"component.states.extended.template\\\" data-ng-if=\\\"component.isExtended\\\"></div><div class=\\\"settings\\\" data-ng-include=\\\"component.states.settings.template\\\" data-ng-if=\\\"component.displaySettings && !dashboard.isExtended && !component.isExtended\\\"></div></div>\");\n$templateCache.put(\"dashboard.directive.html\",\"<div id=\\\"dashboard-{{ id }}\\\" class=\\\"dashboard-container\\\" data-ng-style=\\\"{ \\'width\\': dashboard.options.width }\\\"><div data-ng-repeat=\\\"column in dashboard.grid\\\"><div id=\\\"column{{$index+0}}\\\" class=\\\"dashboard-column\\\" data-ng-class=\\\"{ \\'placeholder\\' : dashboard.isStateSorting, \\'shake-effect\\': dashboard.isStateSorting }\\\" data-ng-sortable=\\\"sortableConfig\\\" data-ng-style=\\\"{ \\'max-width\\': dashboard.columnsWidth, \\'width\\': dashboard.columnsWidth }\\\"><div class=\\\"component\\\" data-ng-repeat=\\\"component in column\\\"><display-component component=\\\"component\\\" dashboard=\\\"dashboard\\\"></display-component></div></div></div><div class=\\\"clearfix\\\"></div></div>\");}]);"],"sourceRoot":"/source/"}