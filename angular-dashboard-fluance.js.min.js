{"version":3,"sources":["angular-dashboard-fluance.js"],"names":["angular","module","directive","restrict","scope","component","dashboard","templateUrl","link","element","attrs","params","states","controller","openExtended","event","isStateSorting","enableExtended","isExtended","extended","closeExtended","openSettings","displaySettings","settings","closeSettings","dashboardFactory","timeout","id","width","columns","columnsMinWidth","get","setOptions","refresh","window","addEventListener","clearTimeout","setTimeout","$apply","DashboardFactoryFunction","DashboardObject","store","remove","reinitialize","factory","$inject","DashboardObjectFunction","$injector","add","instance","nbComponent","components","push","options","toggleSortable","currentWidth","$","parent","console","log","numberOfColumnPossible","parseInt","maxAllowColumns","lastNumberColumns","columnsWidth","grid","i","sortable","forEach","column","position","nbColumn","positions","length","Math","floor","random","splice","newOptions","Object","keys","key","toString","componentList","name","JSON","stringify","fromString","dashboardString","parse","has","componentObject","sortAllComponents","evt","oldColumn","from","replace","newColumn","to","oldIndex","newIndex","index","makeItSortable","Sortable","create","document","getElementById","group","draggable","disabled","handle","onAdd","onUpdate","sort","option","disableExtended","DEFAULT_DASHBOARD","algo","service","run","$templateCache","put"],"mappings":"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","file":"angular-dashboard-fluance.js","sourcesContent":["(function() {\n    'use strict';\n\n    /**\n     *\n     * @ngdoc module\n     * @name dashboard\n     * @module dashboard\n     * @packageName dashboard\n     * @description\n     * Main module to display angular dashboard fluance.\n     *\n     **/\n    angular.module('dashboard', []);\n})();\n\n/**\n * Mycockpit Directive\n */\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .directive('displayComponent', function() {\n            return {\n                restrict: 'E',\n                scope: {\n                    'component': '=',\n                    'dashboard': '='\n                },\n                templateUrl: 'dashboard.component.directive.html',\n                link: function(scope, element, attrs) {\n\n                    scope.params = scope.component.params;\n                    if (scope.component.scope) {\n                        // angular.extend(scope, scope.component.scope);\n                        // Break data binding :( needs to be fixed\n                        scope.scope = scope.component.scope;\n                    }\n\n                    if (scope.component.states.default && scope.component.states.default.controller) {\n                        scope.component.states.default.controller();\n                    }\n\n                    scope.openExtended = function(event) {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.dashboard.enableExtended();\n                            scope.component.isExtended = true;\n                            // Execute JS\n                            if (scope.component.states.extended && scope.component.states.extended.controller) {\n                                scope.component.states.extended.controller();\n                            }\n                        }\n                    };\n                    scope.closeExtended = function(event) {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.dashboard.isExtended = false;\n                            scope.component.isExtended = false;\n                            if (scope.component.states.default && scope.component.states.default.controller) {\n                                scope.component.states.default.controller();\n                            }\n                        }\n                    };\n                    scope.openSettings = function(event) {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.component.displaySettings = true;\n                            if (scope.component.states.settings && scope.component.states.settings.controller) {\n                                scope.component.states.settings.controller();\n                            }\n                        }\n                    };\n                    scope.closeSettings = function(event) {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.component.displaySettings = false;\n                            if (scope.component.states.default && scope.component.states.default.controller) {\n                                scope.component.states.default.controller();\n                            }\n                        }\n                    };\n                }\n            };\n        });\n})();\n\n/**\n * Mycockpit Directive\n */\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .directive('dashboard', ['dashboardFactory', function(dashboardFactory) {\n\n            // Width of the dashboard container\n            var currentWidth;\n            // To detet a change of column\n            var lastNumberColumns;\n            // Usually currentWidth / minWidth where max is numberMaxOfColumn\n            var numberOfColumnPossible;\n            // Width of columns in % to use in ng-style\n            var columnsWidth;\n            // Maximum number of columns\n            var numberMaxOfColumn;\n            // Thread to avoir too much event trigger during resize\n            var timeout;\n\n            return {\n                restrict: 'E',\n                scope: {\n                    'id': '@',\n                    'width': '@',\n                    'columns': '@',\n                    'columnsMinWidth': '@'\n                },\n                templateUrl: 'dashboard.directive.html',\n                controller: ['$scope', function(scope) {\n\n                    scope.dashboard = dashboardFactory.get(scope.id);\n\n                    scope.dashboard.setOptions({\n                        'width': scope['width'],\n                        'columns': scope['columns'],\n                        'columnsMinWidth': scope['columnsMinWidth']\n                    });\n\n                    scope.dashboard.refresh();\n\n                    // On resize we refresh\n                    window.addEventListener('resize', function(event) {\n\n                        clearTimeout(timeout);\n                        timeout = setTimeout(function () {\n\n                            scope.dashboard.refresh();\n                            scope.$apply();\n\n                        }, 150);\n                    }, true);\n                }]\n            };\n        }]);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .factory('dashboardFactory', DashboardFactoryFunction);\n\n    DashboardFactoryFunction.$inject = ['dashboardObject'];\n\n    /**\n     * @ngdoc service\n     * @module dashboard\n     * @name dashboardObject\n     * @description\n     *\n     * This is a dashboard object. Allow you to create an object.\n     *\n     */\n    function DashboardFactoryFunction(DashboardObject) {\n\n        /**\n         * This object store all dashboards, available by id.\n         * @type {Object}\n         */\n        var store = {};\n\n        var factory = {\n            get: get,\n            remove: remove,\n            reinitialize: reinitialize\n        };\n\n        return factory;\n\n        /**\n         * Get a dashboard, based on its id\n         * @param  {String} id [description]\n         * @return {Object}    Index of dashbaords\n         */\n        function get(id) {\n            if (!store[id]) {\n                store[id] = new DashboardObject();\n                store[id].id = id;\n            }\n            return store[id];\n        }\n\n        /**\n         * Remove from a dashboard, based on its id\n         * @param  {String} id [description]\n         */\n        function remove(id) {\n            if (store[id]) {\n                delete store[id];\n            }\n        }\n\n        /**\n         * Remove all dashboards from factory (used to reinitialize)\n         */\n        function reinitialize() {\n            store = {};\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .service('dashboardObject', DashboardObjectFunction);\n\n    DashboardObjectFunction.$inject = ['$injector'];\n\n\n    /**\n     * @ngdoc service\n     * @module dashboard\n     * @name dashboardObject\n     * @description\n     *\n     * This is a dashboard object. Allow you to create an object.\n     */\n    function DashboardObjectFunction($injector) {\n\n        /* jshint maxdepth: 10 */\n\n        // Return a function to be used as new User();\n        return function(params) {\n            var DEFAULT_DASHBOARD = {\n                // ID : string to identify a dashboard\n                id: null,\n                // auto_increment when add a component. To generate unique ID\n                nbComponent: 0,\n                // Used in template to know if dashboard is extended or not\n                isExtended: false,\n                // List of all component\n                components: [],\n                // Array of columns. Contain all component\n                grid: [],\n\n                // Define if dashboard is in sortable state\n                isStateSorting: false, // Activate disable shaking state\n\n                // This array contain list of sortable columns\n                sortable: null, // Array of columns objects\n\n                // Column width in pixel\n                columnsWidth: null,\n\n                // stored option to manage dashboard configuration.\n                options: {\n                    // Full width of entiere dashboard\n                    'width': 'auto',\n                    // Number of columns in dashboard\n                    'columns': '2',\n                    // Min widht of columns.\n                    'columnsMinWidth': null,\n                    // Enable/disable sorting\n                    'sortable': true,\n                    // Algorithm to define where to put component if no column\n                    // can be shorter, or Random\n                    'algo': 'shorter'\n                },\n\n                /**\n                 * List of function to add\n                 */\n                add: add,\n                setOptions: setOptions,\n                toString: toString,\n                fromString: fromString,\n                enableExtended: enableExtended,\n                disableExtended: disableExtended,\n                refresh: refresh,\n                toggleSortable: toggleSortable\n            };\n\n            var instance = DEFAULT_DASHBOARD;\n\n            var lastNumberColumns, maxAllowColumns;\n\n            return instance;\n\n\n            /**\n             * Add a component in array\n             * @param {Object} component    Dashboard component\n             * @param {integer} column      Column number, starting at zero\n             */\n            function add(component) {\n\n                // Define component ID\n                component.id = instance.id + '-' + instance.nbComponent;\n                instance.nbComponent++;\n                // Add in list\n                instance.components.push(component);\n\n                return component;\n            }\n\n            /**\n             * Refresh dashboard grid layout. Used for exemple on resize event to\n             * redefine column number.\n             * @return {[type]} [description]\n             */\n            function refresh() {\n\n                // Define options shortcut\n                var options = instance.options;\n\n\n                // If is on sorting mode, we stop it\n                if (instance.isStateSorting) {\n                    instance.toggleSortable();\n                }\n\n                //\n                // Redefine grid layout\n                //\n                var currentWidth = $('#' + instance.id).parent().width();\n\n                console.log(currentWidth);\n\n                // If screen smaller than expected width, we take size\n                if (options.width !== 'auto' &&\n                    options.width < currentWidth) {\n                    currentWidth = options.width;\n                }\n                console.log(currentWidth);\n\n                // instance.options.width = currentWidth;\n\n                var numberOfColumnPossible = parseInt(currentWidth / options.columnsMinWidth);\n                if (numberOfColumnPossible > maxAllowColumns) {\n                    numberOfColumnPossible = maxAllowColumns;\n                }\n                if (lastNumberColumns !== numberOfColumnPossible) {\n                    lastNumberColumns = numberOfColumnPossible;\n                    // Case 1, we make them float\n                    if (numberOfColumnPossible < options.columns) {\n                        instance.columnsWidth = (100 / numberOfColumnPossible) + '%';\n                    } else if (numberOfColumnPossible > options.columns) {\n                        instance.columnsWidth = (100 / numberOfColumnPossible) + '%';\n                    } else {\n                        instance.columnsWidth = (100 / options.columns) + '%';\n                    }\n                }\n                options.columns = numberOfColumnPossible;\n\n                console.log(options.columns);\n                //\n                // Dispatch component in new grid layout.\n                //\n                instance.grid = [];\n                for (var i = options['columns'] - 1; i >= 0; i--) {\n                    instance.grid[i] = [];\n                }\n\n                instance.sortable = null;\n                // For each component, we define its position and inject it in our grid object.\n                // Grid is displayed in DOM by dashboard.directive.js\n                instance.components.forEach(function (component) {\n\n                    var column = 0, position = 0;\n                    var nbColumn = options['columns'];\n\n                    // Check if position is define\n                    if (component.positions && component.positions[nbColumn]) {\n                        column = component.positions[nbColumn]['column'];\n                        position = component.positions[nbColumn]['position'];\n                    } else {\n\n                        // We use algo to define component position\n                        if (options['algo'] === 'shorter') {\n                            // For each column starting by the end, we check size\n                            for (var i = options['columns'] - 1; i >= 0; i--) {\n                                // if column i in grid does not exist\n                                if (!instance.grid[i]) {\n                                    column = i;\n                                    instance.grid[i] = [];\n                                } else {\n                                    // Si it exist\n                                    if (instance.grid[i].length <= instance.grid[column].length) {\n                                        column = i;\n                                    }\n                                }\n                            }\n                        } else if (options['algo'] === 'random'){\n                            column = Math.floor(Math.random() * options['columns']);\n                        } else {\n                            column = 0;\n                        }\n\n                        // define position of defined column. Get last position.\n                        if (instance.grid[column]) {\n                            position = instance.grid[column].length;\n                        }\n\n                        // We save new position in our\n                        if (!component.positions) {\n                            component.positions = {};\n                        }\n                        component.positions[nbColumn] = {};\n                        component.positions[nbColumn]['column'] = column;\n                        component.positions[nbColumn]['position'] = position;\n                    }\n\n                    // If grid never used this column before, create one.\n                    if (!instance.grid[column]) {\n                        instance.grid[column] = [];\n                    }\n                    // Add compoment in grid to defined position\n                    instance.grid[column].splice(position, 0, component);\n\n                });\n            }\n\n            /**\n             * Set dashboard options.\n             */\n            function setOptions(newOptions) {\n                // For each new option we override current one.\n                Object.keys(newOptions).forEach(function(key) {\n                    if (newOptions[key]) {\n                        instance.options[key] = newOptions[key];\n                        // If edit columns, we save as maxAllowColumns\n                        if (key === 'columns') {\n                            maxAllowColumns = newOptions[key];\n                        }\n                    }\n                });\n            }\n\n            /**\n             * Convert the dashboard to a String\n             * @return {String} Dashboard as a String\n             */\n            function toString() {\n                var componentList = [];\n\n                // For each column in grid\n                instance.grid.forEach(function(column) {\n                    column.forEach(function(component) {\n                        componentList.push({\n                            name: component.name,\n                            params: component.params,\n                            positions: component.positions\n                        });\n                    });\n                });\n\n                return JSON.stringify(componentList);\n            }\n\n            /**\n             * Create a dashboard from a String\n             * @param  {String} dashboardString Dashboard as a String\n             */\n            function fromString(dashboardString) {\n                var componentList = JSON.parse(dashboardString);\n                var nbColumns = 0;\n\n                componentList.forEach(function(component) {\n                    if ($injector.has(component.name)) {\n                        var componentObject = add(new $injector.get(component.name)(component.params));\n                        componentObject.positions = component.positions;\n                    }\n                });\n            }\n\n            // Apply drag/drop to angular MVC (alias grid object)\n            function sortAllComponents(evt) {\n\n                // Identify columns\n                var oldColumn = evt.from.id.replace('column', '');\n                var newColumn = evt.to.id.replace('column', '');\n\n                // Get component as tmp\n                var component = instance.grid[oldColumn][evt.oldIndex];\n                // Remove old component\n                instance.grid[oldColumn].splice(evt.oldIndex, 1);\n\n                // Update component position\n                //\n                var nbColumn = instance.options['columns'];\n\n                component.positions[nbColumn].column = newColumn;\n\n                // Add component to new location\n                instance.grid[newColumn].splice(evt.newIndex, 0, component);\n\n                // Update old position index\n                instance.grid[oldColumn].forEach(function (component, index) {\n                    component.positions[nbColumn].column = parseInt(oldColumn);\n                    component.positions[nbColumn].position = parseInt(index);\n                });\n\n                // Update new position index\n                instance.grid[newColumn].forEach(function (component, index) {\n                    component.positions[nbColumn].column = parseInt(newColumn);\n                    component.positions[nbColumn].position = parseInt(index);\n                });\n\n            }\n\n            /**\n             * Apply Sortable to HTML and make it draggable/droppable\n             */\n            function makeItSortable() {\n\n                // If columns have already been initialize\n                if (!instance.sortable) {\n                    instance.sortable = [];\n\n                    // apply sortable on each column.\n                    for (var i = 0; i < instance.grid.length; i++) {\n\n                        instance.sortable.push(\n                            Sortable.create(document.getElementById('column' + i), {\n                                group: instance.id,\n                                draggable: '.component',\n                                disabled: !instance.isStateSorting, // No databinding here, need to be updated\n                                handle: '.sortable-handle',\n                                onAdd: function(evt) {\n                                    // Event triggered when add in column\n                                    sortAllComponents(evt);\n                                },\n                                onUpdate: function(evt) {\n                                    // event triggered when column is changed\n                                    sortAllComponents(evt);\n                                }\n                            })\n                        );\n                    }\n                }\n            }\n\n            /**\n             * This function enable/disable sorting state of dashboard\n             */\n            function toggleSortable() {\n                // If dashboard is sortable by user\n                if (!instance.options['sortable']) {\n                    console.log('This dashboard does not allow sorting (see options configuration).');\n                } else {\n                    makeItSortable();\n                    // Toggle sorting state\n                    instance.isStateSorting = !instance.isStateSorting;\n                    // Change disable option for each column\n                    instance.sortable.forEach(function(sort) {\n                        sort.option('disabled', !instance.isStateSorting);\n                    });\n                }\n            }\n\n            function enableExtended() {\n                instance.isExtended = true;\n            }\n\n            /**\n             * This function disable extended dashboard to make it as default\n             */\n            function disableExtended() {\n                instance.isExtended = false;\n\n                instance.components.forEach(function(component) {\n                    if (component.isExtended) {\n                        component.isExtended = false;\n                    }\n                });\n            }\n        };\n    }\n})();\n\nangular.module(\"dashboard\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"dashboard.component.directive.html\",\"<div id=\\\"component.id\\\" class=\\\"dashboard-component\\\"><div class=\\\"default\\\" data-ng-include=\\\"component.states.default.template\\\" data-ng-if=\\\"!dashboard.isExtended && !component.displaySettings\\\"></div><div class=\\\"extended\\\" data-ng-include=\\\"component.states.extended.template\\\" data-ng-if=\\\"component.isExtended\\\"></div><div class=\\\"settings\\\" data-ng-include=\\\"component.states.settings.template\\\" data-ng-if=\\\"component.displaySettings && !dashboard.isExtended\\\"></div></div>\");\n$templateCache.put(\"dashboard.directive.html\",\"<div id=\\\"dashboard-{{ id }}\\\" class=\\\"dashboard-container\\\" data-ng-style=\\\"{ \\'width\\': dashboard.options.width }\\\"><div id=\\\"column{{$index+0}}\\\" class=\\\"dashboard-column\\\" data-ng-class=\\\"{ \\'placeholder\\' : dashboard.isStateSorting, \\'shake-effect\\': dashboard.isStateSorting }\\\" data-ng-repeat=\\\"column in dashboard.grid\\\" data-ng-style=\\\"{ \\'max-width\\': dashboard.columnsWidth, \\'width\\': dashboard.columnsWidth }\\\"><div class=\\\"component\\\" data-ng-repeat=\\\"component in column\\\"><display-component component=\\\"component\\\" dashboard=\\\"dashboard\\\"></display-component></div></div><div class=\\\"clearfix\\\"></div></div>\");}]);"],"sourceRoot":"/source/"}