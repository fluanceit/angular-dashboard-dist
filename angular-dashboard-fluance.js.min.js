{"version":3,"sources":["angular-dashboard-fluance.js"],"names":["angular","module","directive","restrict","scope","component","dashboard","templateUrl","link","element","attrs","params","states","controller","openExtended","isStateSorting","isExtended","extended","closeExtended","openSettings","displaySettings","settings","closeSettings","dashboardFactory","calculate","columns","minWidth","callback","numberOfColumnPossible","parseInt","currentWidth","numberMaxOfColumn","lastNumberColumns","columnsWidth","undefined","timeout","id","width","columnsMinWidth","touchStartHandler","event","now","Date","getTime","timesince","mylatesttap","$apply","e","toggleSortable","holdTimer","setTimeout","touchDuration","touchEndHandler","clearTimeout","touchMoveHandler","$","parent","get","setOptions","drawGrid","window","addEventListener","document","getElementById","offsetWidth","options","theElement","DashboardFactoryFunction","DashboardObject","store","factory","$inject","DashboardObjectFunction","$injector","add","column","dashboardObject","nbComponent","components","push","grid","sortable","forEach","position","nbColumn","positions","i","length","Math","floor","random","splice","newOptions","Object","keys","key","toString","tmpColumns","tmpColumn","name","JSON","stringify","fromString","dashboardString","parse","nbColumns","has","sortAllComponents","evt","oldColumn","from","replace","newColumn","to","oldIndex","newIndex","console","log","makeItSortable","Sortable","create","group","draggable","disabled","handle","onAdd","onUpdate","sort","option","disableExtended","DEFAULT_DASHBOARD","algo","service","run","$templateCache","put"],"mappings":"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","file":"angular-dashboard-fluance.js","sourcesContent":["(function() {\n    'use strict';\n\n    /**\n     *\n     * @ngdoc module\n     * @name dashboard\n     * @module dashboard\n     * @packageName dashboard\n     * @description\n     * Main module to display angular dashboard fluance.\n     *\n     **/\n    angular.module('dashboard', []);\n})();\n\n/**\n * Mycockpit Directive\n */\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .directive('displayComponent', function() {\n            return {\n                restrict: 'E',\n                scope: {\n                    'component': '=',\n                    'dashboard': '='\n                },\n                templateUrl: 'dashboard.component.directive.html',\n                link: function(scope, element, attrs) {\n\n                    scope.params = scope.component.params;\n                    if (scope.component.scope) {\n                        // angular.extend(scope, scope.component.scope);\n                        // Break data binding :( needs to be fixed\n                        scope.scope = scope.component.scope;\n                    }\n\n                    if (scope.component.states.default && scope.component.states.default.controller) {\n                        scope.component.states.default.controller();\n                    }\n\n                    scope.openExtended = function() {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.dashboard.isExtended = true;\n                            scope.component.isExtended = true;\n                            // Execute JS\n                            if (scope.component.states.extended && scope.component.states.extended.controller) {\n                                scope.component.states.extended.controller();\n                            }\n\n                        }\n                    };\n                    scope.closeExtended = function() {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.dashboard.isExtended = false;\n                            scope.component.isExtended = false;\n                            if (scope.component.states.default && scope.component.states.default.controller) {\n                                scope.component.states.default.controller();\n                            }\n\n                        }\n                    };\n                    scope.openSettings = function() {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.component.displaySettings = true;\n                            if (scope.component.states.settings && scope.component.states.settings.controller) {\n                                scope.component.states.settings.controller();\n                            }\n\n                        }\n                    };\n                    scope.closeSettings = function() {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.component.displaySettings = false;\n                            if (scope.component.states.default && scope.component.states.default.controller) {\n                                scope.component.states.default.controller();\n                            }\n\n                        }\n                    };\n                }\n            };\n        });\n})();\n\n/**\n * Mycockpit Directive\n */\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .directive('dashboard', ['dashboardFactory', function(dashboardFactory) {\n\n\n            // Width of the dashboard container\n            var currentWidth;\n            // To detet a change of column\n            var lastNumberColumns;\n            // Usually currentWidth / minWidth where max is numberMaxOfColumn\n            var numberOfColumnPossible;\n            // Width of columns in % to use in ng-style\n            var columnsWidth;\n            // Maximum number of columns\n            var numberMaxOfColumn;\n            // Thread to avoir too much event trigger during resize\n            var timeout;\n\n            // This function calculate column width based on columns number and current width.\n            function calculate(columns, minWidth, callback) {\n\n                numberOfColumnPossible = parseInt(currentWidth / minWidth);\n\n                if (numberOfColumnPossible > numberMaxOfColumn) {\n                    numberOfColumnPossible = numberMaxOfColumn;\n                }\n\n                if (lastNumberColumns !== numberOfColumnPossible) {\n                    lastNumberColumns = numberOfColumnPossible;\n                    // Case 1, we make them float\n                    if (numberOfColumnPossible < columns) {\n                        columnsWidth = (100 / numberOfColumnPossible) + '%';\n                    } else if (numberOfColumnPossible > columns) {\n                        columnsWidth = (100 / numberOfColumnPossible) + '%';\n                    } else {\n                        columnsWidth = (100 / columns) + '%';\n                    }\n                }\n\n                if (callback !== undefined) {\n                    callback();\n                }\n            }\n\n            return {\n                restrict: 'E',\n                scope: {\n                    'id': '@',\n                    'width': '@',\n                    'columns': '@',\n                    'columnsMinWidth': '@'\n                },\n                templateUrl: 'dashboard.directive.html',\n                controller: ['$scope', function(scope) {\n\n                    // Get current width of parent\n                    currentWidth = $('#' + scope.id).parent().width();\n\n                    // If screen smaller than expected width, we take size\n                    if (scope.width !== 'auto' && currentWidth > scope.width) {\n                        currentWidth = scope.width;\n                    }\n\n                    numberMaxOfColumn = scope.columns;\n\n                    // init claculation for widhtcolumns and number of columns\n                    calculate(scope.columns, scope.columnsMinWidth);\n\n                    scope.columnsWidth = columnsWidth;\n\n                    scope.dashboard = dashboardFactory.get(scope.id);\n\n                    scope.dashboard.setOptions({\n                        'width': scope['width'],\n                        'columns': numberOfColumnPossible,\n                        'columnsMinWidth': scope['columnsMinWidth']\n                    });\n\n                    scope.dashboard.drawGrid();\n                    // This is use during resize, to detect a change of state with previous value\n                    lastNumberColumns = scope.columns;\n\n                    // On each resize, we look if columns are smaller than scope.columnsMinWidth and\n                    // if it is we trigger a claculate and then a scope.apply()\n                    window.addEventListener('resize', function() {\n\n                        clearTimeout(timeout);\n                        timeout = setTimeout(function () {\n                            //\n                            currentWidth = document.getElementById(scope.id).offsetWidth;\n                            calculate(scope.columns, scope.columnsMinWidth, function() {\n\n                                if (numberOfColumnPossible !== scope.dashboard.options['columns']) {\n                                    scope.columnsWidth = columnsWidth;\n                                    scope.dashboard.setOptions({\n                                        'columns': numberOfColumnPossible\n                                    });\n                                    scope.dashboard.drawGrid();\n                                    // scope.$apply() is required since scope is modified in an even.\n                                    scope.$apply();\n                                }\n                            });\n                        }, 150);\n\n\n                    }, true);\n\n\n                    // Doing some touch stuff ...\n                    var theElement = document.getElementById(scope['id']);\n\n                    var mylatesttap = 0;\n                    var holdTimer = 0;\n                    var touchDuration = 500;\n\n                    theElement.addEventListener('touchstart', touchStartHandler, false);\n                    theElement.addEventListener('touchend', touchEndHandler, false);\n                    theElement.addEventListener('touchmove', touchMoveHandler, false);\n\n                    function touchStartHandler(event) {\n                        if (scope.dashboard.isStateSorting) {\n                            var now = new Date().getTime();\n                            var timesince = now - mylatesttap;\n                            if ((timesince < 500) && (timesince > 0)) {\n                                scope.$apply(function(e) {\n                                    scope.dashboard.toggleSortable();\n                                });\n                            }\n                            mylatesttap = new Date().getTime();\n                        } else {\n                            holdTimer = setTimeout(function() {\n                                scope.$apply(function(e) {\n                                    scope.dashboard.toggleSortable();\n                                });\n                            }, touchDuration);\n                        }\n                    }\n\n                    function touchEndHandler(event) {\n                        if (holdTimer) {\n                            clearTimeout(holdTimer);\n                        }\n                    }\n\n                    function touchMoveHandler(event) {\n                        if (holdTimer) {\n                            clearTimeout(holdTimer);\n                        }\n                    }\n\n                }]\n            };\n        }]);\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .factory('dashboardFactory', DashboardFactoryFunction);\n\n    DashboardFactoryFunction.$inject = ['dashboardObject'];\n\n    /**\n     * @ngdoc service\n     * @module dashboard\n     * @name dashboardObject\n     * @description\n     *\n     * This is a dashboard object. Allow you to create an object.\n     *\n     */\n    function DashboardFactoryFunction(DashboardObject) {\n\n        /**\n         * This object store all dashboards, available by id.\n         * @type {Object}\n         */\n        var store = {};\n\n        var factory = {\n            get: get\n        };\n\n        return factory;\n\n        /**\n         * Get a dashboard, based on its id\n         * @param  {[type]} id [description]\n         * @return {[type]}    [description]\n         */\n        function get(id) {\n            if (!store[id]) {\n                store[id] = new DashboardObject();\n                store[id].id = id;\n            }\n            return store[id];\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .service('dashboardObject', DashboardObjectFunction);\n\n    DashboardObjectFunction.$inject = ['$injector'];\n\n\n    /**\n     * @ngdoc service\n     * @module dashboard\n     * @name dashboardObject\n     * @description\n     *\n     * This is a dashboard object. Allow you to create an object.\n     */\n    function DashboardObjectFunction($injector) {\n\n        /* jshint maxdepth: 10 */\n\n        // Return a function to be used as new User();\n        return function(params) {\n            var DEFAULT_DASHBOARD = {\n                // ID : string to identify a dashboard\n                id: null,\n                // auto_increment when add a component. To generate unique ID\n                nbComponent: 0,\n                // Used in template to know if dashboard is extended or not\n                isExtended: false,\n                // List of all component\n                components: [],\n                // Array of columns. Contain all component\n                grid: [],\n\n                // Define if dashboard is in sortable state\n                isStateSorting: false, // Activate disable shaking state\n\n                // This array contain list of sortable columns\n                sortable: null, // Array of columns objects\n\n                // stored option to manage dashboard configuration.\n                options: {\n                    // Full width of entiere dashboard\n                    'width': 'auto',\n                    // Number of columns in dashboard\n                    'columns': '2',\n                    // Min widht of columns.\n                    'columnsMinWidth': null,\n                    // Enable/disable sorting\n                    'sortable': true,\n                    // Algorithm to define where to put component if no column\n                    // can be shorter, or Random\n                    'algo': 'shorter'\n                },\n\n                /**\n                 * List of function to add\n                 */\n                add: add,\n                setOptions: setOptions,\n                toString: toString,\n                fromString: fromString,\n                disableExtended: disableExtended,\n                drawGrid: drawGrid,\n                toggleSortable: toggleSortable\n            };\n\n            var dashboardObject = DEFAULT_DASHBOARD;\n\n            return dashboardObject;\n\n            /**\n             * Add a component in array\n             * @param {Object} component    Dashboard component\n             * @param {integer} column      Column number, starting at zero\n             */\n            function add(component, column) {\n\n                // Define component ID\n                component.id = dashboardObject.id + '-' + dashboardObject.nbComponent;\n                dashboardObject.nbComponent++;\n                // Add in list\n                dashboardObject.components.push(component);\n\n            }\n\n            /**\n             * Put all components in grid based on algo OR defined position saved in string.\n             */\n            function drawGrid() {\n                // If is on sorting mode, we stop it\n                if (dashboardObject.isStateSorting) {\n                    dashboardObject.toggleSortable();\n                }\n\n                dashboardObject.grid = [];\n                dashboardObject.sortable = null;\n                // For each component, we define its position and inject it in our grid object.\n                // Grid is displayed in DOM by dashboard.directive.js\n                dashboardObject.components.forEach(function (component) {\n\n                    var column = 0, position = 0;\n                    var nbColumn = dashboardObject.options['columns'];\n\n                    // Check if position is define\n                    if (component.positions && component.positions[nbColumn]) {\n                        column = component.positions[nbColumn]['column'];\n                        position = component.positions[nbColumn]['position'];\n                    } else {\n\n                        // We use algo to define component position\n                        if (dashboardObject.options['algo'] === 'shorter') {\n                            // For each column starting by the end, we check size\n                            for (var i = dashboardObject.options['columns'] - 1; i >= 0; i--) {\n                                // if column i in grid does not exist\n                                if (!dashboardObject.grid[i]) {\n                                    column = i;\n                                    dashboardObject.grid[i] = [];\n                                } else {\n                                    // Si it exist\n                                    if (dashboardObject.grid[i].length <= dashboardObject.grid[column].length) {\n                                        column = i;\n                                    }\n                                }\n                            }\n                        } else if (dashboardObject.options['algo'] === 'random'){\n                            column = Math.floor(Math.random() * dashboardObject.options['columns']);\n                        } else {\n                            column = 0;\n                        }\n\n                        // define position of defined column. Get last position.\n                        if (dashboardObject.grid[column]) {\n                            position = dashboardObject.grid[column].length;\n                        }\n\n                        // We save new position in our\n                        if (!component.positions) {\n                            component.positions = {};\n                        }\n                        component.positions[nbColumn] = {};\n                        component.positions[nbColumn]['column'] = column;\n                        component.positions[nbColumn]['position'] = position;\n                    }\n\n                    // If grid never used this column before, create one.\n                    if (!dashboardObject.grid[column]) {\n                        dashboardObject.grid[column] = [];\n                    }\n                    // Add compoment in grid to defined position\n                    dashboardObject.grid[column].splice(position, 0, component);\n\n                });\n            }\n\n            /**\n             * Set dashboard options.\n             */\n            function setOptions(newOptions) {\n                // For each new option we override current one.\n                Object.keys(newOptions).forEach(function(key) {\n                    if (newOptions[key]) {\n                        dashboardObject.options[key] = newOptions[key];\n                    }\n                });\n            }\n\n            /**\n             * Convert the dashboard to a String\n             * @return {String} Dashboard as a String\n             */\n            function toString() {\n                var tmpColumns = [];\n                var tmpColumn = [];\n\n                // For each column in grid\n                dashboardObject.grid.forEach(function(column) {\n                    tmpColumn = [];\n                    column.forEach(function(component) {\n                        tmpColumn.push({\n                            name: component.name,\n                            params: component.params,\n                            positions: component.positions\n                        });\n                    });\n                    tmpColumns.push(tmpColumn);\n                });\n\n                return JSON.stringify(tmpColumns);\n            }\n\n            /**\n             * Create a dashboard from a String\n             * @param  {String} dashboardString Dashboard as a String\n             */\n            function fromString(dashboardString) {\n                var tmpColumns = JSON.parse(dashboardString);\n                var nbColumns = 0;\n\n                tmpColumns.forEach(function(column) {\n                    column.forEach(function(component) {\n                        if ($injector.has(component.name)) {\n                            add(new $injector.get(component.name)(component.params, component.positions), nbColumns);\n                        }\n                    });\n                    nbColumns++;\n                });\n            }\n\n            // Apply drag/drop to angular MVC (alias grid object)\n            function sortAllComponents(evt) {\n\n                // Identify columns\n                var oldColumn = evt.from.id.replace('column', '');\n                var newColumn = evt.to.id.replace('column', '');\n\n                // Get component as tmp\n                var component = dashboardObject.grid[oldColumn][evt.oldIndex];\n                // Remove old component\n                dashboardObject.grid[oldColumn].splice(evt.oldIndex, 1);\n\n                if (evt.newIndex === 0) {\n                    console.log(dashboardObject.grid[newColumn]);\n                }\n                // Add component to new location\n                dashboardObject.grid[newColumn].splice(evt.newIndex, 0, component);\n\n                if (evt.newIndex === 0) {\n                    console.log(dashboardObject.grid[newColumn]);\n                }\n\n            }\n\n            /**\n             * Apply Sortable to HTML and make it draggable/droppable\n             */\n            function makeItSortable() {\n\n                // If columns have already been initialize\n                if (!dashboardObject.sortable) {\n                    dashboardObject.sortable = [];\n\n                    // apply sortable on each column.\n                    for (var i = 0; i < dashboardObject.grid.length; i++) {\n\n                        dashboardObject.sortable.push(\n                            Sortable.create(document.getElementById('column' + i), {\n                                group: dashboardObject.id,\n                                draggable: '.component',\n                                disabled: !dashboardObject.isStateSorting, // No databinding here, need to be updated\n                                handle: '.sortable-handle',\n                                onAdd: function(evt) {\n                                    // Event triggered when add in column\n                                    sortAllComponents(evt);\n                                },\n                                onUpdate: function(evt) {\n                                    // event triggered when column is changed\n                                    sortAllComponents(evt);\n                                }\n                            })\n                        );\n                    }\n                }\n            }\n\n            /**\n             * This function enable/disable sorting state of dashboard\n             */\n            function toggleSortable() {\n                // If dashboard is sortable by user\n                if (!dashboardObject.options['sortable']) {\n                    console.log('This dashboard does not allow sorting (see options configuration).');\n                } else {\n                    makeItSortable();\n                    // Toggle sorting state\n                    dashboardObject.isStateSorting = !dashboardObject.isStateSorting;\n                    // Change disable option for each column\n                    dashboardObject.sortable.forEach(function(sort) {\n                        sort.option('disabled', !dashboardObject.isStateSorting);\n                    });\n                }\n            }\n\n            /**\n             * This function disable extended dashboard to make it as default\n             */\n            function disableExtended() {\n                dashboardObject.isExtended = false;\n\n                dashboardObject.components.forEach(function(component) {\n                    if (component.isExtended) {\n                        component.isExtended = false;\n                    }\n                });\n\n            }\n        };\n    }\n})();\n\nangular.module(\"dashboard\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"dashboard.component.directive.html\",\"<div id=\\\"component.id\\\" class=\\\"dashboard-component\\\"><div class=\\\"default\\\" data-ng-include=\\\"component.states.default.template\\\" data-ng-if=\\\"!dashboard.isExtended && !component.displaySettings\\\"></div><div class=\\\"extended\\\" data-ng-include=\\\"component.states.extended.template\\\" data-ng-if=\\\"component.isExtended\\\"></div><div class=\\\"settings\\\" data-ng-include=\\\"component.states.settings.template\\\" data-ng-if=\\\"component.displaySettings && !dashboard.isExtended\\\"></div></div>\");\n$templateCache.put(\"dashboard.directive.html\",\"<div id=\\\"{{ id }}\\\" class=\\\"dashboard-container\\\" data-ng-style=\\\"{ \\'width\\': width }\\\"><div id=\\\"column{{$index+0}}\\\" class=\\\"dashboard-column\\\" data-ng-class=\\\"{ \\'placeholder\\' : dashboard.isStateSorting, \\'shake-effect\\': dashboard.isStateSorting }\\\" data-ng-repeat=\\\"column in dashboard.grid\\\" data-ng-style=\\\"{ \\'max-width\\': columnsWidth, \\'width\\': columnsWidth }\\\"><div class=\\\"component\\\" data-ng-repeat=\\\"component in column\\\"><display-component component=\\\"component\\\" dashboard=\\\"dashboard\\\"></display-component></div></div><div class=\\\"clearfix\\\"></div></div>\");}]);"],"sourceRoot":"/source/"}