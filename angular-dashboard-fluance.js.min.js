{"version":3,"sources":["angular-dashboard-fluance.js"],"names":["angular","module","directive","restrict","scope","component","dashboard","templateUrl","link","element","attrs","params","states","controller","openExtended","isStateSorting","isExtended","extended","closeExtended","openSettings","displaySettings","settings","closeSettings","dashboardFactory","calculate","columns","minWidth","callback","numberOfColumnPossible","parseInt","currentWidth","numberMaxOfColumn","lastNumberColumns","columnsWidth","undefined","timeout","id","width","columnsMinWidth","$","parent","get","setOptions","drawGrid","window","addEventListener","clearTimeout","setTimeout","document","getElementById","offsetWidth","options","$apply","DashboardFactoryFunction","DashboardObject","store","remove","reinitialize","factory","$inject","DashboardObjectFunction","$injector","add","dashboardObject","nbComponent","components","push","toggleSortable","grid","i","sortable","forEach","column","position","nbColumn","positions","length","Math","floor","random","splice","newOptions","Object","keys","key","toString","componentList","name","JSON","stringify","fromString","dashboardString","parse","has","componentObject","sortAllComponents","evt","oldColumn","from","replace","newColumn","to","oldIndex","newIndex","index","makeItSortable","Sortable","create","group","draggable","disabled","handle","onAdd","onUpdate","sort","option","console","log","disableExtended","DEFAULT_DASHBOARD","algo","service","run","$templateCache","put"],"mappings":"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","file":"angular-dashboard-fluance.js","sourcesContent":["(function() {\n    'use strict';\n\n    /**\n     *\n     * @ngdoc module\n     * @name dashboard\n     * @module dashboard\n     * @packageName dashboard\n     * @description\n     * Main module to display angular dashboard fluance.\n     *\n     **/\n    angular.module('dashboard', []);\n})();\n\n/**\n * Mycockpit Directive\n */\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .directive('displayComponent', function() {\n            return {\n                restrict: 'E',\n                scope: {\n                    'component': '=',\n                    'dashboard': '='\n                },\n                templateUrl: 'dashboard.component.directive.html',\n                link: function(scope, element, attrs) {\n\n                    scope.params = scope.component.params;\n                    if (scope.component.scope) {\n                        // angular.extend(scope, scope.component.scope);\n                        // Break data binding :( needs to be fixed\n                        scope.scope = scope.component.scope;\n                    }\n\n                    if (scope.component.states.default && scope.component.states.default.controller) {\n                        scope.component.states.default.controller();\n                    }\n\n                    scope.openExtended = function() {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.dashboard.isExtended = true;\n                            scope.component.isExtended = true;\n                            // Execute JS\n                            if (scope.component.states.extended && scope.component.states.extended.controller) {\n                                scope.component.states.extended.controller();\n                            }\n\n                        }\n                    };\n                    scope.closeExtended = function() {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.dashboard.isExtended = false;\n                            scope.component.isExtended = false;\n                            if (scope.component.states.default && scope.component.states.default.controller) {\n                                scope.component.states.default.controller();\n                            }\n\n                        }\n                    };\n                    scope.openSettings = function() {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.component.displaySettings = true;\n                            if (scope.component.states.settings && scope.component.states.settings.controller) {\n                                scope.component.states.settings.controller();\n                            }\n\n                        }\n                    };\n                    scope.closeSettings = function() {\n                        if (!scope.dashboard.isStateSorting) {\n                            scope.component.displaySettings = false;\n                            if (scope.component.states.default && scope.component.states.default.controller) {\n                                scope.component.states.default.controller();\n                            }\n\n                        }\n                    };\n                }\n            };\n        });\n})();\n\n/**\n * Mycockpit Directive\n */\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .directive('dashboard', ['dashboardFactory', function(dashboardFactory) {\n\n\n            // Width of the dashboard container\n            var currentWidth;\n            // To detet a change of column\n            var lastNumberColumns;\n            // Usually currentWidth / minWidth where max is numberMaxOfColumn\n            var numberOfColumnPossible;\n            // Width of columns in % to use in ng-style\n            var columnsWidth;\n            // Maximum number of columns\n            var numberMaxOfColumn;\n            // Thread to avoir too much event trigger during resize\n            var timeout;\n\n            // This function calculate column width based on columns number and current width.\n            function calculate(columns, minWidth, callback) {\n\n                numberOfColumnPossible = parseInt(currentWidth / minWidth);\n\n                if (numberOfColumnPossible > numberMaxOfColumn) {\n                    numberOfColumnPossible = numberMaxOfColumn;\n                }\n\n                if (lastNumberColumns !== numberOfColumnPossible) {\n                    lastNumberColumns = numberOfColumnPossible;\n                    // Case 1, we make them float\n                    if (numberOfColumnPossible < columns) {\n                        columnsWidth = (100 / numberOfColumnPossible) + '%';\n                    } else if (numberOfColumnPossible > columns) {\n                        columnsWidth = (100 / numberOfColumnPossible) + '%';\n                    } else {\n                        columnsWidth = (100 / columns) + '%';\n                    }\n                }\n\n                if (callback !== undefined) {\n                    callback();\n                }\n            }\n\n            return {\n                restrict: 'E',\n                scope: {\n                    'id': '@',\n                    'width': '@',\n                    'columns': '@',\n                    'columnsMinWidth': '@'\n                },\n                templateUrl: 'dashboard.directive.html',\n                controller: ['$scope', function(scope) {\n\n                    // Get current width of parent\n                    currentWidth = $('#' + scope.id).parent().width();\n\n                    // If screen smaller than expected width, we take size\n                    if (scope.width !== 'auto' && currentWidth > scope.width) {\n                        currentWidth = scope.width;\n                    }\n\n                    numberMaxOfColumn = scope.columns;\n\n                    // init claculation for widhtcolumns and number of columns\n                    calculate(scope.columns, scope.columnsMinWidth);\n\n                    scope.columnsWidth = columnsWidth;\n\n                    scope.dashboard = dashboardFactory.get(scope.id);\n\n                    scope.dashboard.setOptions({\n                        'width': scope['width'],\n                        'columns': numberOfColumnPossible,\n                        'columnsMinWidth': scope['columnsMinWidth']\n                    });\n\n                    scope.dashboard.drawGrid();\n                    // This is use during resize, to detect a change of state with previous value\n                    lastNumberColumns = scope.columns;\n\n                    // On each resize, we look if columns are smaller than scope.columnsMinWidth and\n                    // if it is we trigger a claculate and then a scope.apply()\n                    window.addEventListener('resize', function() {\n\n                        clearTimeout(timeout);\n                        timeout = setTimeout(function () {\n                            //\n                            currentWidth = document.getElementById(scope.id).offsetWidth;\n                            calculate(scope.columns, scope.columnsMinWidth, function() {\n\n                                if (numberOfColumnPossible !== scope.dashboard.options['columns']) {\n                                    scope.columnsWidth = columnsWidth;\n                                    scope.dashboard.setOptions({\n                                        'columns': numberOfColumnPossible\n                                    });\n                                    scope.dashboard.drawGrid();\n                                    // scope.$apply() is required since scope is modified in an even.\n                                    scope.$apply();\n                                }\n                            });\n                        }, 150);\n                    }, true);\n                }]\n            };\n        }]);\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .factory('dashboardFactory', DashboardFactoryFunction);\n\n    DashboardFactoryFunction.$inject = ['dashboardObject'];\n\n    /**\n     * @ngdoc service\n     * @module dashboard\n     * @name dashboardObject\n     * @description\n     *\n     * This is a dashboard object. Allow you to create an object.\n     *\n     */\n    function DashboardFactoryFunction(DashboardObject) {\n\n        /**\n         * This object store all dashboards, available by id.\n         * @type {Object}\n         */\n        var store = {};\n\n        var factory = {\n            get: get,\n            remove: remove,\n            reinitialize: reinitialize\n        };\n\n        return factory;\n\n        /**\n         * Get a dashboard, based on its id\n         * @param  {String} id [description]\n         * @return {Object}    Index of dashbaords\n         */\n        function get(id) {\n            if (!store[id]) {\n                store[id] = new DashboardObject();\n                store[id].id = id;\n            }\n            return store[id];\n        }\n\n        /**\n         * Remove from a dashboard, based on its id\n         * @param  {String} id [description]\n         */\n        function remove(id) {\n            if (store[id]) {\n                delete store[id];\n            }\n        }\n\n        /**\n         * Remove all dashboards from factory (used to reinitialize)\n         */\n        function reinitialize() {\n            store = {};\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('dashboard')\n        .service('dashboardObject', DashboardObjectFunction);\n\n    DashboardObjectFunction.$inject = ['$injector'];\n\n\n    /**\n     * @ngdoc service\n     * @module dashboard\n     * @name dashboardObject\n     * @description\n     *\n     * This is a dashboard object. Allow you to create an object.\n     */\n    function DashboardObjectFunction($injector) {\n\n        /* jshint maxdepth: 10 */\n\n        // Return a function to be used as new User();\n        return function(params) {\n            var DEFAULT_DASHBOARD = {\n                // ID : string to identify a dashboard\n                id: null,\n                // auto_increment when add a component. To generate unique ID\n                nbComponent: 0,\n                // Used in template to know if dashboard is extended or not\n                isExtended: false,\n                // List of all component\n                components: [],\n                // Array of columns. Contain all component\n                grid: [],\n\n                // Define if dashboard is in sortable state\n                isStateSorting: false, // Activate disable shaking state\n\n                // This array contain list of sortable columns\n                sortable: null, // Array of columns objects\n\n                // stored option to manage dashboard configuration.\n                options: {\n                    // Full width of entiere dashboard\n                    'width': 'auto',\n                    // Number of columns in dashboard\n                    'columns': '2',\n                    // Min widht of columns.\n                    'columnsMinWidth': null,\n                    // Enable/disable sorting\n                    'sortable': true,\n                    // Algorithm to define where to put component if no column\n                    // can be shorter, or Random\n                    'algo': 'shorter'\n                },\n\n                /**\n                 * List of function to add\n                 */\n                add: add,\n                setOptions: setOptions,\n                toString: toString,\n                fromString: fromString,\n                disableExtended: disableExtended,\n                drawGrid: drawGrid,\n                toggleSortable: toggleSortable\n            };\n\n            var dashboardObject = DEFAULT_DASHBOARD;\n\n            return dashboardObject;\n\n            /**\n             * Add a component in array\n             * @param {Object} component    Dashboard component\n             * @param {integer} column      Column number, starting at zero\n             */\n            function add(component) {\n\n                // Define component ID\n                component.id = dashboardObject.id + '-' + dashboardObject.nbComponent;\n                dashboardObject.nbComponent++;\n                // Add in list\n                dashboardObject.components.push(component);\n\n                return component;\n            }\n\n            /**\n             * Put all components in grid based on algo OR defined position saved in string.\n             */\n            function drawGrid() {\n                // If is on sorting mode, we stop it\n                if (dashboardObject.isStateSorting) {\n                    dashboardObject.toggleSortable();\n                }\n\n                dashboardObject.grid = [];\n                for (var i = dashboardObject.options['columns'] - 1; i >= 0; i--) {\n                    dashboardObject.grid[i] = [];\n                }\n\n                dashboardObject.sortable = null;\n                // For each component, we define its position and inject it in our grid object.\n                // Grid is displayed in DOM by dashboard.directive.js\n                dashboardObject.components.forEach(function (component) {\n\n                    var column = 0, position = 0;\n                    var nbColumn = dashboardObject.options['columns'];\n\n                    // Check if position is define\n                    if (component.positions && component.positions[nbColumn]) {\n                        column = component.positions[nbColumn]['column'];\n                        position = component.positions[nbColumn]['position'];\n                    } else {\n\n                        // We use algo to define component position\n                        if (dashboardObject.options['algo'] === 'shorter') {\n                            // For each column starting by the end, we check size\n                            for (var i = dashboardObject.options['columns'] - 1; i >= 0; i--) {\n                                // if column i in grid does not exist\n                                if (!dashboardObject.grid[i]) {\n                                    column = i;\n                                    dashboardObject.grid[i] = [];\n                                } else {\n                                    // Si it exist\n                                    if (dashboardObject.grid[i].length <= dashboardObject.grid[column].length) {\n                                        column = i;\n                                    }\n                                }\n                            }\n                        } else if (dashboardObject.options['algo'] === 'random'){\n                            column = Math.floor(Math.random() * dashboardObject.options['columns']);\n                        } else {\n                            column = 0;\n                        }\n\n                        // define position of defined column. Get last position.\n                        if (dashboardObject.grid[column]) {\n                            position = dashboardObject.grid[column].length;\n                        }\n\n                        // We save new position in our\n                        if (!component.positions) {\n                            component.positions = {};\n                        }\n                        component.positions[nbColumn] = {};\n                        component.positions[nbColumn]['column'] = column;\n                        component.positions[nbColumn]['position'] = position;\n                    }\n\n                    // If grid never used this column before, create one.\n                    if (!dashboardObject.grid[column]) {\n                        dashboardObject.grid[column] = [];\n                    }\n                    // Add compoment in grid to defined position\n                    dashboardObject.grid[column].splice(position, 0, component);\n\n                });\n            }\n\n            /**\n             * Set dashboard options.\n             */\n            function setOptions(newOptions) {\n                // For each new option we override current one.\n                Object.keys(newOptions).forEach(function(key) {\n                    if (newOptions[key]) {\n                        dashboardObject.options[key] = newOptions[key];\n                    }\n                });\n            }\n\n            /**\n             * Convert the dashboard to a String\n             * @return {String} Dashboard as a String\n             */\n            function toString() {\n                var componentList = [];\n\n                // For each column in grid\n                dashboardObject.grid.forEach(function(column) {\n                    column.forEach(function(component) {\n                        componentList.push({\n                            name: component.name,\n                            params: component.params,\n                            positions: component.positions\n                        });\n                    });\n                });\n\n                return JSON.stringify(componentList);\n            }\n\n            /**\n             * Create a dashboard from a String\n             * @param  {String} dashboardString Dashboard as a String\n             */\n            function fromString(dashboardString) {\n                var componentList = JSON.parse(dashboardString);\n                var nbColumns = 0;\n\n                componentList.forEach(function(component) {\n                    if ($injector.has(component.name)) {\n                        var componentObject = add(new $injector.get(component.name)(component.params));\n                        componentObject.positions = component.positions;\n                    }\n                });\n            }\n\n            // Apply drag/drop to angular MVC (alias grid object)\n            function sortAllComponents(evt) {\n\n                // Identify columns\n                var oldColumn = evt.from.id.replace('column', '');\n                var newColumn = evt.to.id.replace('column', '');\n\n                // Get component as tmp\n                var component = dashboardObject.grid[oldColumn][evt.oldIndex];\n                // Remove old component\n                dashboardObject.grid[oldColumn].splice(evt.oldIndex, 1);\n\n                // Update component position\n                //\n                var nbColumn = dashboardObject.options['columns'];\n\n                component.positions[nbColumn].column = newColumn;\n\n                // Add component to new location\n                dashboardObject.grid[newColumn].splice(evt.newIndex, 0, component);\n\n                // Update old position index\n                dashboardObject.grid[oldColumn].forEach(function (component, index) {\n                    component.positions[nbColumn].column = parseInt(oldColumn);\n                    component.positions[nbColumn].position = parseInt(index);\n                });\n\n                // Update new position index\n                dashboardObject.grid[newColumn].forEach(function (component, index) {\n                    component.positions[nbColumn].column = parseInt(newColumn);\n                    component.positions[nbColumn].position = parseInt(index);\n                });\n\n            }\n\n            /**\n             * Apply Sortable to HTML and make it draggable/droppable\n             */\n            function makeItSortable() {\n\n                // If columns have already been initialize\n                if (!dashboardObject.sortable) {\n                    dashboardObject.sortable = [];\n\n                    // apply sortable on each column.\n                    for (var i = 0; i < dashboardObject.grid.length; i++) {\n\n                        dashboardObject.sortable.push(\n                            Sortable.create(document.getElementById('column' + i), {\n                                group: dashboardObject.id,\n                                draggable: '.component',\n                                disabled: !dashboardObject.isStateSorting, // No databinding here, need to be updated\n                                handle: '.sortable-handle',\n                                onAdd: function(evt) {\n                                    // Event triggered when add in column\n                                    sortAllComponents(evt);\n                                },\n                                onUpdate: function(evt) {\n                                    // event triggered when column is changed\n                                    sortAllComponents(evt);\n                                }\n                            })\n                        );\n                    }\n                }\n            }\n\n            /**\n             * This function enable/disable sorting state of dashboard\n             */\n            function toggleSortable() {\n                // If dashboard is sortable by user\n                if (!dashboardObject.options['sortable']) {\n                    console.log('This dashboard does not allow sorting (see options configuration).');\n                } else {\n                    makeItSortable();\n                    // Toggle sorting state\n                    dashboardObject.isStateSorting = !dashboardObject.isStateSorting;\n                    // Change disable option for each column\n                    dashboardObject.sortable.forEach(function(sort) {\n                        sort.option('disabled', !dashboardObject.isStateSorting);\n                    });\n                }\n            }\n\n            /**\n             * This function disable extended dashboard to make it as default\n             */\n            function disableExtended() {\n                dashboardObject.isExtended = false;\n\n                dashboardObject.components.forEach(function(component) {\n                    if (component.isExtended) {\n                        component.isExtended = false;\n                    }\n                });\n            }\n        };\n    }\n})();\n\nangular.module(\"dashboard\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"dashboard.component.directive.html\",\"<div id=\\\"component.id\\\" class=\\\"dashboard-component\\\"><div class=\\\"default\\\" data-ng-include=\\\"component.states.default.template\\\" data-ng-if=\\\"!dashboard.isExtended && !component.displaySettings\\\"></div><div class=\\\"extended\\\" data-ng-include=\\\"component.states.extended.template\\\" data-ng-if=\\\"component.isExtended\\\"></div><div class=\\\"settings\\\" data-ng-include=\\\"component.states.settings.template\\\" data-ng-if=\\\"component.displaySettings && !dashboard.isExtended\\\"></div></div>\");\n$templateCache.put(\"dashboard.directive.html\",\"<div id=\\\"{{ id }}\\\" class=\\\"dashboard-container\\\" data-ng-style=\\\"{ \\'width\\': width }\\\"><div id=\\\"column{{$index+0}}\\\" class=\\\"dashboard-column\\\" data-ng-class=\\\"{ \\'placeholder\\' : dashboard.isStateSorting, \\'shake-effect\\': dashboard.isStateSorting }\\\" data-ng-repeat=\\\"column in dashboard.grid\\\" data-ng-style=\\\"{ \\'max-width\\': columnsWidth, \\'width\\': columnsWidth }\\\"><div class=\\\"component\\\" data-ng-repeat=\\\"component in column\\\"><display-component component=\\\"component\\\" dashboard=\\\"dashboard\\\"></display-component></div></div><div class=\\\"clearfix\\\"></div></div>\");}]);"],"sourceRoot":"/source/"}